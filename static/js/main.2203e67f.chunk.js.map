{"version":3,"sources":["components/common/Button.jsx","components/projects/hexie/HexieEncoder.jsx","components/projects/home/Home.jsx","App.js","serviceWorker.js","store.js","index.js"],"names":["Button","children","onClick","rest","className","href","HexieEncoder","location","useState","input","setInput","customDict","setCustomDict","output","setOutput","history","useHistory","search","URLSearchParams","act","get","dict","decodeURI","txt","dictArr","useMemo","d","split","map","e","trim","onClickEncode","useCallback","replace","pathname","encodeURI","onClickDecode","doEncode","result","length","encode","ex","doDecode","console","log","decode","useEffect","onChange","value","target","readOnly","type","placeholder","Home","props","App","to","path","component","exact","Date","getFullYear","Boolean","window","hostname","match","VERSION","Symbol","_init","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2203e67f.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\n\nconst Button = ({ children, onClick, ...rest }) => {\n\treturn (\n\t\t<a onClick={(...args) => onClick && onClick(...args)} className=\"Button\" href=\"javascript: void(0)\" {...rest}>{ children }</a>\n\t);\n}\n\nexport default Button;","import React, { useState, useCallback, useMemo, useEffect } from 'react';\nimport Button from '../../common/Button';\nimport { encode, decode } from 'hexie-encode';\nimport { useHistory } from 'react-router-dom';\n\nconst HexieEncoder = ({ location }) => {\n\tconst [input, setInput] = useState('');\n\tconst [customDict, setCustomDict] = useState('');\n\tconst [output, setOutput] = useState('');\n\tconst history = useHistory();\n\n\tconst search = new URLSearchParams(location?.search ?? '');\n\tconst act = search.get('act') || 'decode';\n\tconst dict = decodeURI(search.get('dict') || '');\n\tconst txt = decodeURI(search.get('txt') || '');\n\n\tconst dictArr = useMemo(() => {\n\t\tconst d = customDict || dict;\n\t\tif (d) {\n\t\t\treturn d.split(/[,，]/).map(e => e.trim());\n\t\t}\n\t}, [customDict, dict]);\n\n\tconst onClickEncode = useCallback(() => {\n\t\thistory.replace(location.pathname + '?' + ('act=encode') + (customDict ? `&dict=${encodeURI(customDict)}` : '') + (input ? `&txt=${encodeURI(input)}` : ''));\n\t}, [input, dictArr, setOutput]);\n\n\tconst onClickDecode = useCallback(() => {\n\t\thistory.replace(location.pathname + '?' + ('act=decode') + (customDict ? `&dict=${encodeURI(customDict)}` : '') + (input ? `&txt=${encodeURI(input)}` : ''));\n\t}, [input, dictArr, setOutput]);\n\n\tconst doEncode = useCallback((txt, dict) => {\n\t\ttry {\n\t\t\tconst result = dict && dict.length > 2 ? encode(txt, dict) : encode(txt);\n\t\t\tsetOutput(result);\n\t\t} catch (ex) {\n\t\t\tsetOutput('');\n\t\t}\n\t}, [input, dictArr, setOutput]);\n\n\tconst doDecode = useCallback((txt, dict) => {\n\t\tconsole.log('decode', txt);\n\t\ttry {\n\t\t\tconst result = dict && dict.length > 2 ? decode(txt, dict) : decode(txt);\n\t\t\tsetOutput(result);\n\t\t} catch (ex) {\n\t\t\tsetOutput('');\n\t\t}\n\t}, [input, dictArr, setOutput]);\n\n\n\tuseEffect(() => {\n\t\tif (txt) {\n\t\t\tsetInput(txt);\n\t\t}\n\n\t\tif (dict) {\n\t\t\tsetCustomDict(dict);\n\t\t}\n\n\t\tif (act) {\n\t\t\tif (act === 'decode') {\n\t\t\t\tdoDecode(txt, dictArr);\n\t\t\t} else {\n\t\t\t\tdoEncode(txt, dictArr);\n\t\t\t}\n\t\t}\n\t}, [act, txt, dict]);\n\n\treturn (\n\t\t<div className=\"HexieEncoder\">\n\t\t\t<h1>和谐加密器</h1>\n\t\t\t<textarea onChange={({ target: { value } }) => {\n\t\t\t\tsetOutput('');\n\t\t\t\tsetInput(value);\n\t\t\t}} value={input}></textarea>\n\t\t\t<div className=\"button-area\">\n\t\t\t\t<Button onClick={onClickEncode}>加密</Button>\n\t\t\t\t<Button onClick={onClickDecode}>解密</Button>\n\t\t\t</div>\n\t\t\t<textarea value={output} readOnly={true}></textarea>\n\t\t\t<h2>自定义字典</h2>\n\t\t\t<input type=\"text\" placeholder=\"富强,民主,文明,和谐,自由,平等,公正,法治,爱国,敬业,诚信,友善\" onChange={({ target: { value } }) => {\n\t\t\t\tsetOutput('');\n\t\t\t\tsetCustomDict(value);\n\t\t\t}} value={customDict} />\n\t\t</div>\n\t);\n}\n\nexport default HexieEncoder;","import React from 'react';\n\nconst Home = props => {\n\treturn (\n\t\t<div className=\"Home\">\n\t\t\t<h2>施工中，请稍后再来</h2>\n\t\t</div>\n\t);\n}\n\nexport default Home;","import React from 'react';\nimport HexieEncoder from './components/projects/hexie/HexieEncoder';\nimport {\n\tHashRouter as Router,\n\tSwitch,\n\tRoute,\n\tLink\n} from \"react-router-dom\";\nimport Home from './components/projects/home/Home';\n\nconst App = () => {\n\treturn (\n\t\t<Router>\n\t\t\t<div className=\"App\">\n\t\t\t\t<nav>\n\t\t\t\t\t<Link to=\"/\" className=\"logo\"></Link>\n\t\t\t\t\t<Link to=\"/\">首页</Link>\n\t\t\t\t\t<Link to=\"/hexie\">和谐加密器</Link>\n\t\t\t\t</nav>\n\t\t\t\t<main>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path=\"/hexie\" component={HexieEncoder} />\n\t\t\t\t\t\t<Route path=\"/\" component={Home} exact />\n\t\t\t\t\t</Switch>\n\t\t\t\t</main>\n\t\t\t\t<footer>\n\t\t\t\t\t&copy;&nbsp;<a href=\"https://github.com/wheatup/\" target=\"_blank\">wheatup</a>&nbsp;@{new Date().getFullYear()} All rights reserved.\n\t\t\t\t</footer>\n\t\t\t</div>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { init as _init } from 'wherehouse';\n\nexport const VERSION = Symbol();\n\nexport const init = () => {\n\t_init({\n\t\t[VERSION]: '1.0'\n\t});\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './scss/style.scss';\nimport { init } from './store';\n\ninit();\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}